
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cadastro
 * 
 */
export type cadastro = $Result.DefaultSelection<Prisma.$cadastroPayload>
/**
 * Model dados
 * 
 */
export type dados = $Result.DefaultSelection<Prisma.$dadosPayload>
/**
 * Model Pesos
 * 
 */
export type Pesos = $Result.DefaultSelection<Prisma.$PesosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cadastros
 * const cadastros = await prisma.cadastro.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cadastros
   * const cadastros = await prisma.cadastro.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cadastro`: Exposes CRUD operations for the **cadastro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastros
    * const cadastros = await prisma.cadastro.findMany()
    * ```
    */
  get cadastro(): Prisma.cadastroDelegate<ExtArgs>;

  /**
   * `prisma.dados`: Exposes CRUD operations for the **dados** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dados
    * const dados = await prisma.dados.findMany()
    * ```
    */
  get dados(): Prisma.dadosDelegate<ExtArgs>;

  /**
   * `prisma.pesos`: Exposes CRUD operations for the **Pesos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pesos
    * const pesos = await prisma.pesos.findMany()
    * ```
    */
  get pesos(): Prisma.PesosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cadastro: 'cadastro',
    dados: 'dados',
    Pesos: 'Pesos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cadastro' | 'dados' | 'pesos'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      cadastro: {
        payload: Prisma.$cadastroPayload<ExtArgs>
        fields: Prisma.cadastroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastroFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastroFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload>
          }
          findFirst: {
            args: Prisma.cadastroFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastroFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload>
          }
          findMany: {
            args: Prisma.cadastroFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload>[]
          }
          create: {
            args: Prisma.cadastroCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload>
          }
          createMany: {
            args: Prisma.cadastroCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cadastroDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload>
          }
          update: {
            args: Prisma.cadastroUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload>
          }
          deleteMany: {
            args: Prisma.cadastroDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cadastroUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cadastroUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastroPayload>
          }
          aggregate: {
            args: Prisma.CadastroAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCadastro>
          }
          groupBy: {
            args: Prisma.cadastroGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CadastroGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastroCountArgs<ExtArgs>,
            result: $Utils.Optional<CadastroCountAggregateOutputType> | number
          }
        }
      }
      dados: {
        payload: Prisma.$dadosPayload<ExtArgs>
        fields: Prisma.dadosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dadosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dadosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload>
          }
          findFirst: {
            args: Prisma.dadosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dadosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload>
          }
          findMany: {
            args: Prisma.dadosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload>[]
          }
          create: {
            args: Prisma.dadosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload>
          }
          createMany: {
            args: Prisma.dadosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.dadosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload>
          }
          update: {
            args: Prisma.dadosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload>
          }
          deleteMany: {
            args: Prisma.dadosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.dadosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.dadosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dadosPayload>
          }
          aggregate: {
            args: Prisma.DadosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDados>
          }
          groupBy: {
            args: Prisma.dadosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DadosGroupByOutputType>[]
          }
          count: {
            args: Prisma.dadosCountArgs<ExtArgs>,
            result: $Utils.Optional<DadosCountAggregateOutputType> | number
          }
        }
      }
      Pesos: {
        payload: Prisma.$PesosPayload<ExtArgs>
        fields: Prisma.PesosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PesosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PesosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload>
          }
          findFirst: {
            args: Prisma.PesosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PesosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload>
          }
          findMany: {
            args: Prisma.PesosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload>[]
          }
          create: {
            args: Prisma.PesosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload>
          }
          createMany: {
            args: Prisma.PesosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PesosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload>
          }
          update: {
            args: Prisma.PesosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload>
          }
          deleteMany: {
            args: Prisma.PesosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PesosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PesosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesosPayload>
          }
          aggregate: {
            args: Prisma.PesosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePesos>
          }
          groupBy: {
            args: Prisma.PesosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PesosGroupByOutputType>[]
          }
          count: {
            args: Prisma.PesosCountArgs<ExtArgs>,
            result: $Utils.Optional<PesosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model cadastro
   */

  export type AggregateCadastro = {
    _count: CadastroCountAggregateOutputType | null
    _avg: CadastroAvgAggregateOutputType | null
    _sum: CadastroSumAggregateOutputType | null
    _min: CadastroMinAggregateOutputType | null
    _max: CadastroMaxAggregateOutputType | null
  }

  export type CadastroAvgAggregateOutputType = {
    id: number | null
  }

  export type CadastroSumAggregateOutputType = {
    id: number | null
  }

  export type CadastroMinAggregateOutputType = {
    id: number | null
    nome: string | null
    datanasc: Date | null
  }

  export type CadastroMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    datanasc: Date | null
  }

  export type CadastroCountAggregateOutputType = {
    id: number
    nome: number
    datanasc: number
    _all: number
  }


  export type CadastroAvgAggregateInputType = {
    id?: true
  }

  export type CadastroSumAggregateInputType = {
    id?: true
  }

  export type CadastroMinAggregateInputType = {
    id?: true
    nome?: true
    datanasc?: true
  }

  export type CadastroMaxAggregateInputType = {
    id?: true
    nome?: true
    datanasc?: true
  }

  export type CadastroCountAggregateInputType = {
    id?: true
    nome?: true
    datanasc?: true
    _all?: true
  }

  export type CadastroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro to aggregate.
     */
    where?: cadastroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastros to fetch.
     */
    orderBy?: cadastroOrderByWithRelationInput | cadastroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastros
    **/
    _count?: true | CadastroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CadastroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CadastroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CadastroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CadastroMaxAggregateInputType
  }

  export type GetCadastroAggregateType<T extends CadastroAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro[P]>
      : GetScalarType<T[P], AggregateCadastro[P]>
  }




  export type cadastroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastroWhereInput
    orderBy?: cadastroOrderByWithAggregationInput | cadastroOrderByWithAggregationInput[]
    by: CadastroScalarFieldEnum[] | CadastroScalarFieldEnum
    having?: cadastroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CadastroCountAggregateInputType | true
    _avg?: CadastroAvgAggregateInputType
    _sum?: CadastroSumAggregateInputType
    _min?: CadastroMinAggregateInputType
    _max?: CadastroMaxAggregateInputType
  }

  export type CadastroGroupByOutputType = {
    id: number
    nome: string
    datanasc: Date
    _count: CadastroCountAggregateOutputType | null
    _avg: CadastroAvgAggregateOutputType | null
    _sum: CadastroSumAggregateOutputType | null
    _min: CadastroMinAggregateOutputType | null
    _max: CadastroMaxAggregateOutputType | null
  }

  type GetCadastroGroupByPayload<T extends cadastroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CadastroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CadastroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CadastroGroupByOutputType[P]>
            : GetScalarType<T[P], CadastroGroupByOutputType[P]>
        }
      >
    >


  export type cadastroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    datanasc?: boolean
  }, ExtArgs["result"]["cadastro"]>

  export type cadastroSelectScalar = {
    id?: boolean
    nome?: boolean
    datanasc?: boolean
  }


  export type $cadastroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      datanasc: Date
    }, ExtArgs["result"]["cadastro"]>
    composites: {}
  }


  type cadastroGetPayload<S extends boolean | null | undefined | cadastroDefaultArgs> = $Result.GetResult<Prisma.$cadastroPayload, S>

  type cadastroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cadastroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CadastroCountAggregateInputType | true
    }

  export interface cadastroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro'], meta: { name: 'cadastro' } }
    /**
     * Find zero or one Cadastro that matches the filter.
     * @param {cadastroFindUniqueArgs} args - Arguments to find a Cadastro
     * @example
     * // Get one Cadastro
     * const cadastro = await prisma.cadastro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cadastroFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cadastroFindUniqueArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cadastro that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cadastroFindUniqueOrThrowArgs} args - Arguments to find a Cadastro
     * @example
     * // Get one Cadastro
     * const cadastro = await prisma.cadastro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cadastroFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastroFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cadastro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastroFindFirstArgs} args - Arguments to find a Cadastro
     * @example
     * // Get one Cadastro
     * const cadastro = await prisma.cadastro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cadastroFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastroFindFirstArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cadastro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastroFindFirstOrThrowArgs} args - Arguments to find a Cadastro
     * @example
     * // Get one Cadastro
     * const cadastro = await prisma.cadastro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cadastroFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastroFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cadastros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastroFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastros
     * const cadastros = await prisma.cadastro.findMany()
     * 
     * // Get first 10 Cadastros
     * const cadastros = await prisma.cadastro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastroWithIdOnly = await prisma.cadastro.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cadastroFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastroFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cadastro.
     * @param {cadastroCreateArgs} args - Arguments to create a Cadastro.
     * @example
     * // Create one Cadastro
     * const Cadastro = await prisma.cadastro.create({
     *   data: {
     *     // ... data to create a Cadastro
     *   }
     * })
     * 
    **/
    create<T extends cadastroCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cadastroCreateArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cadastros.
     *     @param {cadastroCreateManyArgs} args - Arguments to create many Cadastros.
     *     @example
     *     // Create many Cadastros
     *     const cadastro = await prisma.cadastro.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cadastroCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastroCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro.
     * @param {cadastroDeleteArgs} args - Arguments to delete one Cadastro.
     * @example
     * // Delete one Cadastro
     * const Cadastro = await prisma.cadastro.delete({
     *   where: {
     *     // ... filter to delete one Cadastro
     *   }
     * })
     * 
    **/
    delete<T extends cadastroDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cadastroDeleteArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cadastro.
     * @param {cadastroUpdateArgs} args - Arguments to update one Cadastro.
     * @example
     * // Update one Cadastro
     * const cadastro = await prisma.cadastro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cadastroUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cadastroUpdateArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cadastros.
     * @param {cadastroDeleteManyArgs} args - Arguments to filter Cadastros to delete.
     * @example
     * // Delete a few Cadastros
     * const { count } = await prisma.cadastro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cadastroDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastroDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastros
     * const cadastro = await prisma.cadastro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cadastroUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cadastroUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro.
     * @param {cadastroUpsertArgs} args - Arguments to update or create a Cadastro.
     * @example
     * // Update or create a Cadastro
     * const cadastro = await prisma.cadastro.upsert({
     *   create: {
     *     // ... data to create a Cadastro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro we want to update
     *   }
     * })
    **/
    upsert<T extends cadastroUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cadastroUpsertArgs<ExtArgs>>
    ): Prisma__cadastroClient<$Result.GetResult<Prisma.$cadastroPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cadastros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastroCountArgs} args - Arguments to filter Cadastros to count.
     * @example
     * // Count the number of Cadastros
     * const count = await prisma.cadastro.count({
     *   where: {
     *     // ... the filter for the Cadastros we want to count
     *   }
     * })
    **/
    count<T extends cadastroCountArgs>(
      args?: Subset<T, cadastroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CadastroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadastroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CadastroAggregateArgs>(args: Subset<T, CadastroAggregateArgs>): Prisma.PrismaPromise<GetCadastroAggregateType<T>>

    /**
     * Group by Cadastro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastroGroupByArgs['orderBy'] }
        : { orderBy?: cadastroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro model
   */
  readonly fields: cadastroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cadastro model
   */ 
  interface cadastroFieldRefs {
    readonly id: FieldRef<"cadastro", 'Int'>
    readonly nome: FieldRef<"cadastro", 'String'>
    readonly datanasc: FieldRef<"cadastro", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * cadastro findUnique
   */
  export type cadastroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * Filter, which cadastro to fetch.
     */
    where: cadastroWhereUniqueInput
  }


  /**
   * cadastro findUniqueOrThrow
   */
  export type cadastroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * Filter, which cadastro to fetch.
     */
    where: cadastroWhereUniqueInput
  }


  /**
   * cadastro findFirst
   */
  export type cadastroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * Filter, which cadastro to fetch.
     */
    where?: cadastroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastros to fetch.
     */
    orderBy?: cadastroOrderByWithRelationInput | cadastroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastros.
     */
    cursor?: cadastroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastros.
     */
    distinct?: CadastroScalarFieldEnum | CadastroScalarFieldEnum[]
  }


  /**
   * cadastro findFirstOrThrow
   */
  export type cadastroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * Filter, which cadastro to fetch.
     */
    where?: cadastroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastros to fetch.
     */
    orderBy?: cadastroOrderByWithRelationInput | cadastroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastros.
     */
    cursor?: cadastroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastros.
     */
    distinct?: CadastroScalarFieldEnum | CadastroScalarFieldEnum[]
  }


  /**
   * cadastro findMany
   */
  export type cadastroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * Filter, which cadastros to fetch.
     */
    where?: cadastroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastros to fetch.
     */
    orderBy?: cadastroOrderByWithRelationInput | cadastroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastros.
     */
    cursor?: cadastroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastros.
     */
    skip?: number
    distinct?: CadastroScalarFieldEnum | CadastroScalarFieldEnum[]
  }


  /**
   * cadastro create
   */
  export type cadastroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * The data needed to create a cadastro.
     */
    data: XOR<cadastroCreateInput, cadastroUncheckedCreateInput>
  }


  /**
   * cadastro createMany
   */
  export type cadastroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastros.
     */
    data: cadastroCreateManyInput | cadastroCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cadastro update
   */
  export type cadastroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * The data needed to update a cadastro.
     */
    data: XOR<cadastroUpdateInput, cadastroUncheckedUpdateInput>
    /**
     * Choose, which cadastro to update.
     */
    where: cadastroWhereUniqueInput
  }


  /**
   * cadastro updateMany
   */
  export type cadastroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastros.
     */
    data: XOR<cadastroUpdateManyMutationInput, cadastroUncheckedUpdateManyInput>
    /**
     * Filter which cadastros to update
     */
    where?: cadastroWhereInput
  }


  /**
   * cadastro upsert
   */
  export type cadastroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * The filter to search for the cadastro to update in case it exists.
     */
    where: cadastroWhereUniqueInput
    /**
     * In case the cadastro found by the `where` argument doesn't exist, create a new cadastro with this data.
     */
    create: XOR<cadastroCreateInput, cadastroUncheckedCreateInput>
    /**
     * In case the cadastro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastroUpdateInput, cadastroUncheckedUpdateInput>
  }


  /**
   * cadastro delete
   */
  export type cadastroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
    /**
     * Filter which cadastro to delete.
     */
    where: cadastroWhereUniqueInput
  }


  /**
   * cadastro deleteMany
   */
  export type cadastroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastros to delete
     */
    where?: cadastroWhereInput
  }


  /**
   * cadastro without action
   */
  export type cadastroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro
     */
    select?: cadastroSelect<ExtArgs> | null
  }



  /**
   * Model dados
   */

  export type AggregateDados = {
    _count: DadosCountAggregateOutputType | null
    _avg: DadosAvgAggregateOutputType | null
    _sum: DadosSumAggregateOutputType | null
    _min: DadosMinAggregateOutputType | null
    _max: DadosMaxAggregateOutputType | null
  }

  export type DadosAvgAggregateOutputType = {
    id: number | null
    Altura: number | null
  }

  export type DadosSumAggregateOutputType = {
    id: number | null
    Altura: number | null
  }

  export type DadosMinAggregateOutputType = {
    id: number | null
    tipo_Sangue: string | null
    Especificacao: string | null
    Estado: string | null
    Altura: number | null
  }

  export type DadosMaxAggregateOutputType = {
    id: number | null
    tipo_Sangue: string | null
    Especificacao: string | null
    Estado: string | null
    Altura: number | null
  }

  export type DadosCountAggregateOutputType = {
    id: number
    tipo_Sangue: number
    Especificacao: number
    Estado: number
    Altura: number
    _all: number
  }


  export type DadosAvgAggregateInputType = {
    id?: true
    Altura?: true
  }

  export type DadosSumAggregateInputType = {
    id?: true
    Altura?: true
  }

  export type DadosMinAggregateInputType = {
    id?: true
    tipo_Sangue?: true
    Especificacao?: true
    Estado?: true
    Altura?: true
  }

  export type DadosMaxAggregateInputType = {
    id?: true
    tipo_Sangue?: true
    Especificacao?: true
    Estado?: true
    Altura?: true
  }

  export type DadosCountAggregateInputType = {
    id?: true
    tipo_Sangue?: true
    Especificacao?: true
    Estado?: true
    Altura?: true
    _all?: true
  }

  export type DadosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dados to aggregate.
     */
    where?: dadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dados to fetch.
     */
    orderBy?: dadosOrderByWithRelationInput | dadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dados
    **/
    _count?: true | DadosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DadosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DadosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DadosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DadosMaxAggregateInputType
  }

  export type GetDadosAggregateType<T extends DadosAggregateArgs> = {
        [P in keyof T & keyof AggregateDados]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDados[P]>
      : GetScalarType<T[P], AggregateDados[P]>
  }




  export type dadosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dadosWhereInput
    orderBy?: dadosOrderByWithAggregationInput | dadosOrderByWithAggregationInput[]
    by: DadosScalarFieldEnum[] | DadosScalarFieldEnum
    having?: dadosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DadosCountAggregateInputType | true
    _avg?: DadosAvgAggregateInputType
    _sum?: DadosSumAggregateInputType
    _min?: DadosMinAggregateInputType
    _max?: DadosMaxAggregateInputType
  }

  export type DadosGroupByOutputType = {
    id: number
    tipo_Sangue: string
    Especificacao: string
    Estado: string
    Altura: number
    _count: DadosCountAggregateOutputType | null
    _avg: DadosAvgAggregateOutputType | null
    _sum: DadosSumAggregateOutputType | null
    _min: DadosMinAggregateOutputType | null
    _max: DadosMaxAggregateOutputType | null
  }

  type GetDadosGroupByPayload<T extends dadosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DadosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DadosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DadosGroupByOutputType[P]>
            : GetScalarType<T[P], DadosGroupByOutputType[P]>
        }
      >
    >


  export type dadosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo_Sangue?: boolean
    Especificacao?: boolean
    Estado?: boolean
    Altura?: boolean
  }, ExtArgs["result"]["dados"]>

  export type dadosSelectScalar = {
    id?: boolean
    tipo_Sangue?: boolean
    Especificacao?: boolean
    Estado?: boolean
    Altura?: boolean
  }


  export type $dadosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "dados"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo_Sangue: string
      Especificacao: string
      Estado: string
      Altura: number
    }, ExtArgs["result"]["dados"]>
    composites: {}
  }


  type dadosGetPayload<S extends boolean | null | undefined | dadosDefaultArgs> = $Result.GetResult<Prisma.$dadosPayload, S>

  type dadosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<dadosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DadosCountAggregateInputType | true
    }

  export interface dadosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dados'], meta: { name: 'dados' } }
    /**
     * Find zero or one Dados that matches the filter.
     * @param {dadosFindUniqueArgs} args - Arguments to find a Dados
     * @example
     * // Get one Dados
     * const dados = await prisma.dados.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dadosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, dadosFindUniqueArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dados that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dadosFindUniqueOrThrowArgs} args - Arguments to find a Dados
     * @example
     * // Get one Dados
     * const dados = await prisma.dados.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dadosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dadosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dadosFindFirstArgs} args - Arguments to find a Dados
     * @example
     * // Get one Dados
     * const dados = await prisma.dados.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dadosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, dadosFindFirstArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dados that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dadosFindFirstOrThrowArgs} args - Arguments to find a Dados
     * @example
     * // Get one Dados
     * const dados = await prisma.dados.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dadosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dadosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dadosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dados
     * const dados = await prisma.dados.findMany()
     * 
     * // Get first 10 Dados
     * const dados = await prisma.dados.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dadosWithIdOnly = await prisma.dados.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dadosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dadosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dados.
     * @param {dadosCreateArgs} args - Arguments to create a Dados.
     * @example
     * // Create one Dados
     * const Dados = await prisma.dados.create({
     *   data: {
     *     // ... data to create a Dados
     *   }
     * })
     * 
    **/
    create<T extends dadosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, dadosCreateArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dados.
     *     @param {dadosCreateManyArgs} args - Arguments to create many Dados.
     *     @example
     *     // Create many Dados
     *     const dados = await prisma.dados.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dadosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dadosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dados.
     * @param {dadosDeleteArgs} args - Arguments to delete one Dados.
     * @example
     * // Delete one Dados
     * const Dados = await prisma.dados.delete({
     *   where: {
     *     // ... filter to delete one Dados
     *   }
     * })
     * 
    **/
    delete<T extends dadosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, dadosDeleteArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dados.
     * @param {dadosUpdateArgs} args - Arguments to update one Dados.
     * @example
     * // Update one Dados
     * const dados = await prisma.dados.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dadosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, dadosUpdateArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dados.
     * @param {dadosDeleteManyArgs} args - Arguments to filter Dados to delete.
     * @example
     * // Delete a few Dados
     * const { count } = await prisma.dados.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dadosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dadosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dadosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dados
     * const dados = await prisma.dados.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dadosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, dadosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dados.
     * @param {dadosUpsertArgs} args - Arguments to update or create a Dados.
     * @example
     * // Update or create a Dados
     * const dados = await prisma.dados.upsert({
     *   create: {
     *     // ... data to create a Dados
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dados we want to update
     *   }
     * })
    **/
    upsert<T extends dadosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, dadosUpsertArgs<ExtArgs>>
    ): Prisma__dadosClient<$Result.GetResult<Prisma.$dadosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Dados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dadosCountArgs} args - Arguments to filter Dados to count.
     * @example
     * // Count the number of Dados
     * const count = await prisma.dados.count({
     *   where: {
     *     // ... the filter for the Dados we want to count
     *   }
     * })
    **/
    count<T extends dadosCountArgs>(
      args?: Subset<T, dadosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DadosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DadosAggregateArgs>(args: Subset<T, DadosAggregateArgs>): Prisma.PrismaPromise<GetDadosAggregateType<T>>

    /**
     * Group by Dados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dadosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dadosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dadosGroupByArgs['orderBy'] }
        : { orderBy?: dadosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dadosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDadosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the dados model
   */
  readonly fields: dadosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for dados.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dadosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the dados model
   */ 
  interface dadosFieldRefs {
    readonly id: FieldRef<"dados", 'Int'>
    readonly tipo_Sangue: FieldRef<"dados", 'String'>
    readonly Especificacao: FieldRef<"dados", 'String'>
    readonly Estado: FieldRef<"dados", 'String'>
    readonly Altura: FieldRef<"dados", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * dados findUnique
   */
  export type dadosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * Filter, which dados to fetch.
     */
    where: dadosWhereUniqueInput
  }


  /**
   * dados findUniqueOrThrow
   */
  export type dadosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * Filter, which dados to fetch.
     */
    where: dadosWhereUniqueInput
  }


  /**
   * dados findFirst
   */
  export type dadosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * Filter, which dados to fetch.
     */
    where?: dadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dados to fetch.
     */
    orderBy?: dadosOrderByWithRelationInput | dadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dados.
     */
    cursor?: dadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dados.
     */
    distinct?: DadosScalarFieldEnum | DadosScalarFieldEnum[]
  }


  /**
   * dados findFirstOrThrow
   */
  export type dadosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * Filter, which dados to fetch.
     */
    where?: dadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dados to fetch.
     */
    orderBy?: dadosOrderByWithRelationInput | dadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dados.
     */
    cursor?: dadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dados.
     */
    distinct?: DadosScalarFieldEnum | DadosScalarFieldEnum[]
  }


  /**
   * dados findMany
   */
  export type dadosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * Filter, which dados to fetch.
     */
    where?: dadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dados to fetch.
     */
    orderBy?: dadosOrderByWithRelationInput | dadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dados.
     */
    cursor?: dadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dados.
     */
    skip?: number
    distinct?: DadosScalarFieldEnum | DadosScalarFieldEnum[]
  }


  /**
   * dados create
   */
  export type dadosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * The data needed to create a dados.
     */
    data: XOR<dadosCreateInput, dadosUncheckedCreateInput>
  }


  /**
   * dados createMany
   */
  export type dadosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dados.
     */
    data: dadosCreateManyInput | dadosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * dados update
   */
  export type dadosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * The data needed to update a dados.
     */
    data: XOR<dadosUpdateInput, dadosUncheckedUpdateInput>
    /**
     * Choose, which dados to update.
     */
    where: dadosWhereUniqueInput
  }


  /**
   * dados updateMany
   */
  export type dadosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dados.
     */
    data: XOR<dadosUpdateManyMutationInput, dadosUncheckedUpdateManyInput>
    /**
     * Filter which dados to update
     */
    where?: dadosWhereInput
  }


  /**
   * dados upsert
   */
  export type dadosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * The filter to search for the dados to update in case it exists.
     */
    where: dadosWhereUniqueInput
    /**
     * In case the dados found by the `where` argument doesn't exist, create a new dados with this data.
     */
    create: XOR<dadosCreateInput, dadosUncheckedCreateInput>
    /**
     * In case the dados was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dadosUpdateInput, dadosUncheckedUpdateInput>
  }


  /**
   * dados delete
   */
  export type dadosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
    /**
     * Filter which dados to delete.
     */
    where: dadosWhereUniqueInput
  }


  /**
   * dados deleteMany
   */
  export type dadosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dados to delete
     */
    where?: dadosWhereInput
  }


  /**
   * dados without action
   */
  export type dadosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dados
     */
    select?: dadosSelect<ExtArgs> | null
  }



  /**
   * Model Pesos
   */

  export type AggregatePesos = {
    _count: PesosCountAggregateOutputType | null
    _avg: PesosAvgAggregateOutputType | null
    _sum: PesosSumAggregateOutputType | null
    _min: PesosMinAggregateOutputType | null
    _max: PesosMaxAggregateOutputType | null
  }

  export type PesosAvgAggregateOutputType = {
    id: number | null
  }

  export type PesosSumAggregateOutputType = {
    id: number | null
  }

  export type PesosMinAggregateOutputType = {
    id: number | null
    valor: string | null
    data_gravacao: Date | null
  }

  export type PesosMaxAggregateOutputType = {
    id: number | null
    valor: string | null
    data_gravacao: Date | null
  }

  export type PesosCountAggregateOutputType = {
    id: number
    valor: number
    data_gravacao: number
    _all: number
  }


  export type PesosAvgAggregateInputType = {
    id?: true
  }

  export type PesosSumAggregateInputType = {
    id?: true
  }

  export type PesosMinAggregateInputType = {
    id?: true
    valor?: true
    data_gravacao?: true
  }

  export type PesosMaxAggregateInputType = {
    id?: true
    valor?: true
    data_gravacao?: true
  }

  export type PesosCountAggregateInputType = {
    id?: true
    valor?: true
    data_gravacao?: true
    _all?: true
  }

  export type PesosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pesos to aggregate.
     */
    where?: PesosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesos to fetch.
     */
    orderBy?: PesosOrderByWithRelationInput | PesosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PesosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pesos
    **/
    _count?: true | PesosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PesosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PesosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PesosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PesosMaxAggregateInputType
  }

  export type GetPesosAggregateType<T extends PesosAggregateArgs> = {
        [P in keyof T & keyof AggregatePesos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePesos[P]>
      : GetScalarType<T[P], AggregatePesos[P]>
  }




  export type PesosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PesosWhereInput
    orderBy?: PesosOrderByWithAggregationInput | PesosOrderByWithAggregationInput[]
    by: PesosScalarFieldEnum[] | PesosScalarFieldEnum
    having?: PesosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PesosCountAggregateInputType | true
    _avg?: PesosAvgAggregateInputType
    _sum?: PesosSumAggregateInputType
    _min?: PesosMinAggregateInputType
    _max?: PesosMaxAggregateInputType
  }

  export type PesosGroupByOutputType = {
    id: number
    valor: string
    data_gravacao: Date
    _count: PesosCountAggregateOutputType | null
    _avg: PesosAvgAggregateOutputType | null
    _sum: PesosSumAggregateOutputType | null
    _min: PesosMinAggregateOutputType | null
    _max: PesosMaxAggregateOutputType | null
  }

  type GetPesosGroupByPayload<T extends PesosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PesosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PesosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PesosGroupByOutputType[P]>
            : GetScalarType<T[P], PesosGroupByOutputType[P]>
        }
      >
    >


  export type PesosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    data_gravacao?: boolean
  }, ExtArgs["result"]["pesos"]>

  export type PesosSelectScalar = {
    id?: boolean
    valor?: boolean
    data_gravacao?: boolean
  }


  export type $PesosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pesos"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      valor: string
      data_gravacao: Date
    }, ExtArgs["result"]["pesos"]>
    composites: {}
  }


  type PesosGetPayload<S extends boolean | null | undefined | PesosDefaultArgs> = $Result.GetResult<Prisma.$PesosPayload, S>

  type PesosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PesosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PesosCountAggregateInputType | true
    }

  export interface PesosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pesos'], meta: { name: 'Pesos' } }
    /**
     * Find zero or one Pesos that matches the filter.
     * @param {PesosFindUniqueArgs} args - Arguments to find a Pesos
     * @example
     * // Get one Pesos
     * const pesos = await prisma.pesos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PesosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PesosFindUniqueArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pesos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PesosFindUniqueOrThrowArgs} args - Arguments to find a Pesos
     * @example
     * // Get one Pesos
     * const pesos = await prisma.pesos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PesosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PesosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pesos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesosFindFirstArgs} args - Arguments to find a Pesos
     * @example
     * // Get one Pesos
     * const pesos = await prisma.pesos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PesosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PesosFindFirstArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pesos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesosFindFirstOrThrowArgs} args - Arguments to find a Pesos
     * @example
     * // Get one Pesos
     * const pesos = await prisma.pesos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PesosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PesosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pesos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pesos
     * const pesos = await prisma.pesos.findMany()
     * 
     * // Get first 10 Pesos
     * const pesos = await prisma.pesos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pesosWithIdOnly = await prisma.pesos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PesosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PesosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pesos.
     * @param {PesosCreateArgs} args - Arguments to create a Pesos.
     * @example
     * // Create one Pesos
     * const Pesos = await prisma.pesos.create({
     *   data: {
     *     // ... data to create a Pesos
     *   }
     * })
     * 
    **/
    create<T extends PesosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PesosCreateArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pesos.
     *     @param {PesosCreateManyArgs} args - Arguments to create many Pesos.
     *     @example
     *     // Create many Pesos
     *     const pesos = await prisma.pesos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PesosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PesosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pesos.
     * @param {PesosDeleteArgs} args - Arguments to delete one Pesos.
     * @example
     * // Delete one Pesos
     * const Pesos = await prisma.pesos.delete({
     *   where: {
     *     // ... filter to delete one Pesos
     *   }
     * })
     * 
    **/
    delete<T extends PesosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PesosDeleteArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pesos.
     * @param {PesosUpdateArgs} args - Arguments to update one Pesos.
     * @example
     * // Update one Pesos
     * const pesos = await prisma.pesos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PesosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PesosUpdateArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pesos.
     * @param {PesosDeleteManyArgs} args - Arguments to filter Pesos to delete.
     * @example
     * // Delete a few Pesos
     * const { count } = await prisma.pesos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PesosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PesosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pesos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pesos
     * const pesos = await prisma.pesos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PesosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PesosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pesos.
     * @param {PesosUpsertArgs} args - Arguments to update or create a Pesos.
     * @example
     * // Update or create a Pesos
     * const pesos = await prisma.pesos.upsert({
     *   create: {
     *     // ... data to create a Pesos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pesos we want to update
     *   }
     * })
    **/
    upsert<T extends PesosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PesosUpsertArgs<ExtArgs>>
    ): Prisma__PesosClient<$Result.GetResult<Prisma.$PesosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pesos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesosCountArgs} args - Arguments to filter Pesos to count.
     * @example
     * // Count the number of Pesos
     * const count = await prisma.pesos.count({
     *   where: {
     *     // ... the filter for the Pesos we want to count
     *   }
     * })
    **/
    count<T extends PesosCountArgs>(
      args?: Subset<T, PesosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PesosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pesos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PesosAggregateArgs>(args: Subset<T, PesosAggregateArgs>): Prisma.PrismaPromise<GetPesosAggregateType<T>>

    /**
     * Group by Pesos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PesosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PesosGroupByArgs['orderBy'] }
        : { orderBy?: PesosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PesosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPesosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pesos model
   */
  readonly fields: PesosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pesos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PesosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pesos model
   */ 
  interface PesosFieldRefs {
    readonly id: FieldRef<"Pesos", 'Int'>
    readonly valor: FieldRef<"Pesos", 'String'>
    readonly data_gravacao: FieldRef<"Pesos", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Pesos findUnique
   */
  export type PesosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * Filter, which Pesos to fetch.
     */
    where: PesosWhereUniqueInput
  }


  /**
   * Pesos findUniqueOrThrow
   */
  export type PesosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * Filter, which Pesos to fetch.
     */
    where: PesosWhereUniqueInput
  }


  /**
   * Pesos findFirst
   */
  export type PesosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * Filter, which Pesos to fetch.
     */
    where?: PesosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesos to fetch.
     */
    orderBy?: PesosOrderByWithRelationInput | PesosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pesos.
     */
    cursor?: PesosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pesos.
     */
    distinct?: PesosScalarFieldEnum | PesosScalarFieldEnum[]
  }


  /**
   * Pesos findFirstOrThrow
   */
  export type PesosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * Filter, which Pesos to fetch.
     */
    where?: PesosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesos to fetch.
     */
    orderBy?: PesosOrderByWithRelationInput | PesosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pesos.
     */
    cursor?: PesosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pesos.
     */
    distinct?: PesosScalarFieldEnum | PesosScalarFieldEnum[]
  }


  /**
   * Pesos findMany
   */
  export type PesosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * Filter, which Pesos to fetch.
     */
    where?: PesosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesos to fetch.
     */
    orderBy?: PesosOrderByWithRelationInput | PesosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pesos.
     */
    cursor?: PesosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesos.
     */
    skip?: number
    distinct?: PesosScalarFieldEnum | PesosScalarFieldEnum[]
  }


  /**
   * Pesos create
   */
  export type PesosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * The data needed to create a Pesos.
     */
    data: XOR<PesosCreateInput, PesosUncheckedCreateInput>
  }


  /**
   * Pesos createMany
   */
  export type PesosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pesos.
     */
    data: PesosCreateManyInput | PesosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pesos update
   */
  export type PesosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * The data needed to update a Pesos.
     */
    data: XOR<PesosUpdateInput, PesosUncheckedUpdateInput>
    /**
     * Choose, which Pesos to update.
     */
    where: PesosWhereUniqueInput
  }


  /**
   * Pesos updateMany
   */
  export type PesosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pesos.
     */
    data: XOR<PesosUpdateManyMutationInput, PesosUncheckedUpdateManyInput>
    /**
     * Filter which Pesos to update
     */
    where?: PesosWhereInput
  }


  /**
   * Pesos upsert
   */
  export type PesosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * The filter to search for the Pesos to update in case it exists.
     */
    where: PesosWhereUniqueInput
    /**
     * In case the Pesos found by the `where` argument doesn't exist, create a new Pesos with this data.
     */
    create: XOR<PesosCreateInput, PesosUncheckedCreateInput>
    /**
     * In case the Pesos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PesosUpdateInput, PesosUncheckedUpdateInput>
  }


  /**
   * Pesos delete
   */
  export type PesosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
    /**
     * Filter which Pesos to delete.
     */
    where: PesosWhereUniqueInput
  }


  /**
   * Pesos deleteMany
   */
  export type PesosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pesos to delete
     */
    where?: PesosWhereInput
  }


  /**
   * Pesos without action
   */
  export type PesosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesos
     */
    select?: PesosSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CadastroScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    datanasc: 'datanasc'
  };

  export type CadastroScalarFieldEnum = (typeof CadastroScalarFieldEnum)[keyof typeof CadastroScalarFieldEnum]


  export const DadosScalarFieldEnum: {
    id: 'id',
    tipo_Sangue: 'tipo_Sangue',
    Especificacao: 'Especificacao',
    Estado: 'Estado',
    Altura: 'Altura'
  };

  export type DadosScalarFieldEnum = (typeof DadosScalarFieldEnum)[keyof typeof DadosScalarFieldEnum]


  export const PesosScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    data_gravacao: 'data_gravacao'
  };

  export type PesosScalarFieldEnum = (typeof PesosScalarFieldEnum)[keyof typeof PesosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type cadastroWhereInput = {
    AND?: cadastroWhereInput | cadastroWhereInput[]
    OR?: cadastroWhereInput[]
    NOT?: cadastroWhereInput | cadastroWhereInput[]
    id?: IntFilter<"cadastro"> | number
    nome?: StringFilter<"cadastro"> | string
    datanasc?: DateTimeFilter<"cadastro"> | Date | string
  }

  export type cadastroOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    datanasc?: SortOrder
  }

  export type cadastroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cadastroWhereInput | cadastroWhereInput[]
    OR?: cadastroWhereInput[]
    NOT?: cadastroWhereInput | cadastroWhereInput[]
    nome?: StringFilter<"cadastro"> | string
    datanasc?: DateTimeFilter<"cadastro"> | Date | string
  }, "id">

  export type cadastroOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    datanasc?: SortOrder
    _count?: cadastroCountOrderByAggregateInput
    _avg?: cadastroAvgOrderByAggregateInput
    _max?: cadastroMaxOrderByAggregateInput
    _min?: cadastroMinOrderByAggregateInput
    _sum?: cadastroSumOrderByAggregateInput
  }

  export type cadastroScalarWhereWithAggregatesInput = {
    AND?: cadastroScalarWhereWithAggregatesInput | cadastroScalarWhereWithAggregatesInput[]
    OR?: cadastroScalarWhereWithAggregatesInput[]
    NOT?: cadastroScalarWhereWithAggregatesInput | cadastroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cadastro"> | number
    nome?: StringWithAggregatesFilter<"cadastro"> | string
    datanasc?: DateTimeWithAggregatesFilter<"cadastro"> | Date | string
  }

  export type dadosWhereInput = {
    AND?: dadosWhereInput | dadosWhereInput[]
    OR?: dadosWhereInput[]
    NOT?: dadosWhereInput | dadosWhereInput[]
    id?: IntFilter<"dados"> | number
    tipo_Sangue?: StringFilter<"dados"> | string
    Especificacao?: StringFilter<"dados"> | string
    Estado?: StringFilter<"dados"> | string
    Altura?: FloatFilter<"dados"> | number
  }

  export type dadosOrderByWithRelationInput = {
    id?: SortOrder
    tipo_Sangue?: SortOrder
    Especificacao?: SortOrder
    Estado?: SortOrder
    Altura?: SortOrder
  }

  export type dadosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: dadosWhereInput | dadosWhereInput[]
    OR?: dadosWhereInput[]
    NOT?: dadosWhereInput | dadosWhereInput[]
    tipo_Sangue?: StringFilter<"dados"> | string
    Especificacao?: StringFilter<"dados"> | string
    Estado?: StringFilter<"dados"> | string
    Altura?: FloatFilter<"dados"> | number
  }, "id">

  export type dadosOrderByWithAggregationInput = {
    id?: SortOrder
    tipo_Sangue?: SortOrder
    Especificacao?: SortOrder
    Estado?: SortOrder
    Altura?: SortOrder
    _count?: dadosCountOrderByAggregateInput
    _avg?: dadosAvgOrderByAggregateInput
    _max?: dadosMaxOrderByAggregateInput
    _min?: dadosMinOrderByAggregateInput
    _sum?: dadosSumOrderByAggregateInput
  }

  export type dadosScalarWhereWithAggregatesInput = {
    AND?: dadosScalarWhereWithAggregatesInput | dadosScalarWhereWithAggregatesInput[]
    OR?: dadosScalarWhereWithAggregatesInput[]
    NOT?: dadosScalarWhereWithAggregatesInput | dadosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"dados"> | number
    tipo_Sangue?: StringWithAggregatesFilter<"dados"> | string
    Especificacao?: StringWithAggregatesFilter<"dados"> | string
    Estado?: StringWithAggregatesFilter<"dados"> | string
    Altura?: FloatWithAggregatesFilter<"dados"> | number
  }

  export type PesosWhereInput = {
    AND?: PesosWhereInput | PesosWhereInput[]
    OR?: PesosWhereInput[]
    NOT?: PesosWhereInput | PesosWhereInput[]
    id?: IntFilter<"Pesos"> | number
    valor?: StringFilter<"Pesos"> | string
    data_gravacao?: DateTimeFilter<"Pesos"> | Date | string
  }

  export type PesosOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    data_gravacao?: SortOrder
  }

  export type PesosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PesosWhereInput | PesosWhereInput[]
    OR?: PesosWhereInput[]
    NOT?: PesosWhereInput | PesosWhereInput[]
    valor?: StringFilter<"Pesos"> | string
    data_gravacao?: DateTimeFilter<"Pesos"> | Date | string
  }, "id">

  export type PesosOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    data_gravacao?: SortOrder
    _count?: PesosCountOrderByAggregateInput
    _avg?: PesosAvgOrderByAggregateInput
    _max?: PesosMaxOrderByAggregateInput
    _min?: PesosMinOrderByAggregateInput
    _sum?: PesosSumOrderByAggregateInput
  }

  export type PesosScalarWhereWithAggregatesInput = {
    AND?: PesosScalarWhereWithAggregatesInput | PesosScalarWhereWithAggregatesInput[]
    OR?: PesosScalarWhereWithAggregatesInput[]
    NOT?: PesosScalarWhereWithAggregatesInput | PesosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pesos"> | number
    valor?: StringWithAggregatesFilter<"Pesos"> | string
    data_gravacao?: DateTimeWithAggregatesFilter<"Pesos"> | Date | string
  }

  export type cadastroCreateInput = {
    nome: string
    datanasc: Date | string
  }

  export type cadastroUncheckedCreateInput = {
    id?: number
    nome: string
    datanasc: Date | string
  }

  export type cadastroUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cadastroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cadastroCreateManyInput = {
    id?: number
    nome: string
    datanasc: Date | string
  }

  export type cadastroUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cadastroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type dadosCreateInput = {
    tipo_Sangue: string
    Especificacao: string
    Estado: string
    Altura: number
  }

  export type dadosUncheckedCreateInput = {
    id?: number
    tipo_Sangue: string
    Especificacao: string
    Estado: string
    Altura: number
  }

  export type dadosUpdateInput = {
    tipo_Sangue?: StringFieldUpdateOperationsInput | string
    Especificacao?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Altura?: FloatFieldUpdateOperationsInput | number
  }

  export type dadosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo_Sangue?: StringFieldUpdateOperationsInput | string
    Especificacao?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Altura?: FloatFieldUpdateOperationsInput | number
  }

  export type dadosCreateManyInput = {
    id?: number
    tipo_Sangue: string
    Especificacao: string
    Estado: string
    Altura: number
  }

  export type dadosUpdateManyMutationInput = {
    tipo_Sangue?: StringFieldUpdateOperationsInput | string
    Especificacao?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Altura?: FloatFieldUpdateOperationsInput | number
  }

  export type dadosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo_Sangue?: StringFieldUpdateOperationsInput | string
    Especificacao?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Altura?: FloatFieldUpdateOperationsInput | number
  }

  export type PesosCreateInput = {
    valor: string
    data_gravacao: Date | string
  }

  export type PesosUncheckedCreateInput = {
    id?: number
    valor: string
    data_gravacao: Date | string
  }

  export type PesosUpdateInput = {
    valor?: StringFieldUpdateOperationsInput | string
    data_gravacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PesosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: StringFieldUpdateOperationsInput | string
    data_gravacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PesosCreateManyInput = {
    id?: number
    valor: string
    data_gravacao: Date | string
  }

  export type PesosUpdateManyMutationInput = {
    valor?: StringFieldUpdateOperationsInput | string
    data_gravacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PesosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: StringFieldUpdateOperationsInput | string
    data_gravacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type cadastroCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    datanasc?: SortOrder
  }

  export type cadastroAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type cadastroMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    datanasc?: SortOrder
  }

  export type cadastroMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    datanasc?: SortOrder
  }

  export type cadastroSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type dadosCountOrderByAggregateInput = {
    id?: SortOrder
    tipo_Sangue?: SortOrder
    Especificacao?: SortOrder
    Estado?: SortOrder
    Altura?: SortOrder
  }

  export type dadosAvgOrderByAggregateInput = {
    id?: SortOrder
    Altura?: SortOrder
  }

  export type dadosMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo_Sangue?: SortOrder
    Especificacao?: SortOrder
    Estado?: SortOrder
    Altura?: SortOrder
  }

  export type dadosMinOrderByAggregateInput = {
    id?: SortOrder
    tipo_Sangue?: SortOrder
    Especificacao?: SortOrder
    Estado?: SortOrder
    Altura?: SortOrder
  }

  export type dadosSumOrderByAggregateInput = {
    id?: SortOrder
    Altura?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PesosCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    data_gravacao?: SortOrder
  }

  export type PesosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PesosMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    data_gravacao?: SortOrder
  }

  export type PesosMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    data_gravacao?: SortOrder
  }

  export type PesosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use cadastroDefaultArgs instead
     */
    export type cadastroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cadastroDefaultArgs<ExtArgs>
    /**
     * @deprecated Use dadosDefaultArgs instead
     */
    export type dadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = dadosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PesosDefaultArgs instead
     */
    export type PesosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PesosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}